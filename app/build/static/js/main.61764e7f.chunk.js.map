{"version":3,"sources":["Components/Authorizer.tsx","flux/actions/authorizeAction.tsx","flux/actions/types.tsx","flux/reducers/authReducer.tsx","flux/reducers/index.tsx","flux/store.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["connect","state","isAuthenticated","auth","authorize","dispatch","console","log","axios","get","then","res","Button","onClick","color","AUTHORIZE","initialState","combineReducers","action","type","details","payload","loading","middleware","thunk","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","store","createStore","rootReducer","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAkBeA,eAJS,SAACC,GAAD,MAAuB,CAC7CC,gBAAiBD,EAAME,KAAKD,mBAGU,CAACE,UCHd,kBAAM,SAACC,GAC9BC,QAAQC,IAAI,QACZC,IACGC,IAAI,qBACJC,MAAK,SAAAC,GAAG,OACPL,QAAQC,IAAII,SDFLX,EAZW,SAAC,GAAkB,IAAjBI,EAAgB,EAAhBA,UAC5B,OACE,gCACE,cAACQ,EAAA,EAAD,CAAQC,QAAS,kBAAKT,KAAaU,MAAM,UAAzC,qBAAoE,U,+BET3DC,EAAY,YCOjBC,EAAe,CACnBd,iBAAiB,GCLNe,cAAgB,CAC3Bd,KDOa,WAA6C,IAApCF,EAAmC,uDAA3Be,EAAcE,EAAa,uCACzD,OAAQA,EAAOC,MACb,KAAKJ,EAEH,OADAT,QAAQC,IAAI,YACL,2BACFN,GADL,IAEEmB,QAASF,EAAOG,QAChBC,SAAS,IAEb,QACE,OAAOrB,MEdTsB,EAAa,CAACC,KASdC,GAFmBC,OAAOC,sCAAwCC,KAEtCC,IAAe,WAAf,EAAmBN,IAQtCO,EANDC,YACdC,EAdqB,GAgBrBP,GCHeQ,MAZf,WACE,OACE,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACE,qBAAKI,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,WCGKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.61764e7f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport {authorize} from '../flux/actions/authorizeAction';\r\nimport {IAuthProps} from '../types/interfaces';\r\n\r\nexport const Authorizer = ({authorize})  => {\r\nreturn (\r\n  <div>\r\n    <Button onClick={()=> authorize()} color=\"success\">success</Button>{' '}\r\n  </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state:IAuthProps) => ({\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n});\r\n\r\nexport default connect(mapStateToProps, {authorize})(Authorizer);\r\n\r\n","import axios from 'axios';\r\nimport {AUTHORIZE, USER_LOADING, USER_LOADED, AUTH_ERROR} from './types';\r\n\r\n\r\n// export const authorize = () => (dispatch: Function) => {\r\n//     console.log(\"blue\")\r\n//     axios\r\n//       .get('/api/authenticate')\r\n//       .then(res =>\r\n//         dispatch({\r\n//           type: AUTHORIZE,\r\n//           payload: res.data\r\n//         })\r\n//       );\r\n//   };\r\n  export const authorize = () => (dispatch: Function) => {\r\n    console.log(\"blue\")\r\n    axios\r\n      .get('/api/authenticate')\r\n      .then(res =>\r\n        console.log(res)\r\n      );\r\n  };","export const AUTHORIZE = 'AUTHORIZE';\r\nexport const USER_LOADING = 'USER_LOADING';\r\nexport const USER_LOADED = 'USER_LOADED'\r\nexport const AUTH_ERROR = 'AUTH_ERROR'","import {\r\n    AUTHORIZE,\r\n    USER_LOADING,\r\n    USER_LOADED,\r\n    AUTH_ERROR\r\n  } from '../actions/types';\r\n  \r\n  const initialState = {\r\n    isAuthenticated: false\r\n  };\r\n  \r\n  export default function(state = initialState, action: any) {\r\n    switch (action.type) {\r\n      case AUTHORIZE:\r\n        console.log(\"ALALALAL\")\r\n        return {\r\n          ...state,\r\n          details: action.payload,\r\n          loading: false\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  ","import { combineReducers } from 'redux';\r\nimport authReducer from './authReducer'\r\n\r\nexport default combineReducers({\r\n    auth: authReducer\r\n});\r\n","import { createStore, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\ndeclare global {\r\n    interface Window {\r\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst enhancer = composeEnhancers(applyMiddleware(...middleware));\r\n\r\nconst store = createStore(\r\nrootReducer,\r\ninitialState,\r\nenhancer\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport Authorizer from './Components/Authorizer';\nimport './App.css';\nimport store from './flux/store';\nimport { Provider } from 'react-redux';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Authorizer></Authorizer>\n        </header>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}